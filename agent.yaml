name: Fortify Scan - Salesforce

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'RQA'
        type: choice
        options: [RQA, TL]

permissions:
  contents: read

concurrency:
  group: fortify-${{ github.ref }}
  cancel-in-progress: false

jobs:
  fortify:
    runs-on: arc-small-container
    container:
      image: docker.artifactory.fpl.com/fortify/fortify-cloudscan-client:latest
      options: --memory=4g
    env:
      HOME: /opt/fortify
      SCA_VM_OPTS: -Xmx2750M
      JAVA_TOOL_OPTIONS: -Duser.home=/opt/fortify
      BUILD_ID: salesforce-${{ github.run_id }}

    steps:
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install prerequisites
        shell: bash
        run: |
          set -e
          if command -v apk >/dev/null 2>&1; then apk add --no-cache tar git jq; \
          elif command -v apt-get >/dev/null 2>&1; then apt-get update && apt-get install -y tar git jq; \
          elif command -v yum >/dev/null 2>&1; then yum install -y tar git jq; \
          elif command -v zypper >/dev/null 2>&1; then zypper --non-interactive install tar git jq; \
          else echo "No supported package manager found"; exit 1; fi
          npm install --global @salesforce/cli

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Add Fortify bin to PATH
        shell: bash
        run: |
          set -e
          test -d /opt/fortify/bin || { echo "::error::/opt/fortify/bin not found"; exit 1; }
          echo "/opt/fortify/bin" >> "$GITHUB_PATH"

      - name: Authenticate to Salesforce & Retrieve Components
        id: retrieve
        shell: bash
        run: |
          set -euo pipefail
          
          if [[ "${{ github.event.inputs.environment }}" == "RQA" ]]; then
            SFDX_AUTH_URL=${{ secrets.SFDX_AUTH_URL_RQA }}
            ORG_ALIAS="rqa-org"
          else
            SFDX_AUTH_URL=${{ secrets.SFDX_AUTH_URL_TL }}
            ORG_ALIAS="tl-org"
          fi
          
          echo "$SFDX_AUTH_URL" > sfdx-auth-url.txt
          sf org login sfdx-url --sfdx-url-file sfdx-auth-url.txt --alias "$ORG_ALIAS" --set-default
          
          echo '{
            "packageDirectories": [
              {
                "path": "code",
                "default": true
              }
            ],
            "namespace": "",
            "sfdcApiVersion": "58.0",
            "sourceApiVersion": "58.0"
          }' > sfdx-project.json
          
          RETRIEVAL_OUTPUT=$(sf project retrieve start \
            --target-org "$ORG_ALIAS" \
            --metadata ApexClass,ApexTrigger,ApexPage,ApexComponent,LightningComponentBundle,AuraDefinitionBundle,StaticResource \
            --json)
          
          if echo "$RETRIEVAL_OUTPUT" | grep -q 'Error'; then
            echo "::error::Salesforce CLI retrieval failed. Output:"
            echo "$RETRIEVAL_OUTPUT"
            exit 1
          fi
          
          RETRIEVED_TYPES=$(echo "$RETRIEVAL_OUTPUT" | jq -r '(.result.retrievedSource.source[]?.type // empty)' | sort | uniq | tr '\n' ',' | sed 's/,$//')
          
          echo "Successfully retrieved the following components: ${RETRIEVED_TYPES}"
          
          rm sfdx-auth-url.txt
          rm sfdx-project.json
          
      - name: Fortify Scan
        shell: bash
        run: |
          set -e
          mkdir -p target/fortify
          sourceanalyzer -b "$BUILD_ID" -clean || true
          sourceanalyzer -b "$BUILD_ID" -logfile target/fortify/scan.log -apex "code/**/*" -scan -f target/fortify/scan.fpr

      - name: Generate CSVs
        shell: bash
        run: |
          set -e
          for level in critical high medium low; do
            FPRUtility -project target/fortify/scan.fpr -information -listIssues -search -query "[fortify priority order]:$level" -outputFormat CSV > "${level}.csv"
          done

      - name: Generate PDF report
        shell: bash
        run: |
          set -e
          if command -v BIRTReportGenerator >/dev/null 2>&1; then
            BIRTReportGenerator -template 'OWASP Top 10' --SecurityIssueDetails --IncludeDescOfKeyTerminology --UseFortifyPriorityOrder -source target/fortify/scan.fpr -format pdf --Version 'OWASP Top 10 2017' -output FortifyReport.pdf
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fortify-results-${{ github.event.inputs.environment }}
          path: |
            critical.csv
            high.csv
            medium.csv
            low.csv
            FortifyReport.pdf
            target/fortify/scan.log
            target/fortify/scan.fpr
          retention-days: 30
