name: Fortify Scan - MeinService TL

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  fortify:
    runs-on: arc-small-container
    container:
      image: docker.artifactory.fpl.com/fortify/fortify-cloudscan-client:latest
      options: --memory=4g
    env:
      HOME: /opt/fortify
      SCA_VM_OPTS: -Xmx2750M
      # JVM proxy settings applied globally for Dependency-Check
      JAVA_TOOL_OPTIONS: >
        -Duser.home=/opt/fortify
        -Dhttp.proxyHost=b2b-http.fpl.com
        -Dhttp.proxyPort=8080
        -Dhttps.proxyHost=b2b-http.fpl.com
        -Dhttps.proxyPort=8080
        -Dhttp.nonProxyHosts=*.fpl.com
      BUILD_ID: salesforce-${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Dependency-Check Data
        uses: actions/cache@v3
        with:
          path: ./dependency-check-data
          key: dependency-check-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            dependency-check-${{ runner.os }}-

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Salesforce CLI
        run: npm install --global @salesforce/cli

      - name: Authenticate to Salesforce
        run: |
          echo "${{ secrets.SFDX_AUTH_URL_TL }}" > sfdx_auth.txt
          sf org login sfdx-url --sfdx-url-file sfdx_auth.txt --alias tl-org --set-default
          sf org display --target-org tl-org

      - name: Retrieve Metadata
        run: |
          mkdir -p code
          sf project retrieve start \
            --metadata ApexClass \
            --metadata ApexTrigger \
            --metadata ApexPage \
            --metadata AuraDefinitionBundle \
            --metadata LightningComponentBundle \
            --metadata ApexComponent \
            --metadata StaticResource \
            --target-org tl-org \
            --output-dir code

      - name: Remove Test Classes from Fortify Scan
        run: |
          rm -f code/classes/*Test.cls*
          rm -f code/classes/**/TEST_*.cls*
          rm -f code/classes/**/Test_*.cls*
          rm -f code/classes/*.xml || true

      - name: Extract static resources
        run: |
          mkdir -p code/staticresources_extracted
          for f in code/staticresources/*.resource; do
            if [ -f "$f" ]; then
              outdir="code/staticresources_extracted/$(basename "$f" .resource)"
              mkdir -p "$outdir"
              jar -xf "$f" -C "$outdir" || true
            fi
          done

      - name: Pre-flight Check for NVD API Key
        run: |
          if [ -z "${{ secrets.NVD_API_KEY }}" ]; then
            echo "‚ùå NVD_API_KEY is NOT set! Please add it as a GitHub Secret."
            exit 1
          else
            echo "‚úÖ NVD_API_KEY is set (not printing for security)."
          fi

      - name: Connectivity Test to NVD API
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          echo "üåê Testing connectivity to NVD API..."
          curl -s -o /dev/null -w "%{http_code}" \
            -H "apiKey: $NVD_API_KEY" \
            "https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage=1" > status.txt
          STATUS=$(cat status.txt)
          if [ "$STATUS" != "200" ]; then
            echo "‚ùå Failed to reach NVD API (HTTP $STATUS)"
            exit 1
          else
            echo "‚úÖ Successfully reached NVD API (HTTP $STATUS)"
          fi

      - name: Run Dependency Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          chmod 755 ./tools/dependency-check/bin/*
          ./tools/dependency-check/bin/dependency-check.sh \
            --project "MeinServiceTL" \
            --scan "code/" \
            --exclude "**/aura/**" \
            --exclude "**/lwc/**" \
            --scan "code/staticresources_extracted/" \
            --disableOssIndex \
            --format HTML \
            --format CSV \
            --format JSON \
            --out . \
            --nvdApiKey "$NVD_API_KEY" \
            --data ./dependency-check-data || true

      - name: Archive Reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-reports
          path: |
            dependency-check-report.html
            dependency-check-report.csv
            dependency-check-report.json

      - name: Show CVE DB Info
        if: always()
        run: |
          echo "===== Dependency-Check DB Metadata ====="
          if [ -f dependency-check-report.json ]; then
            grep "NVD CVE" dependency-check-report.json || true
          else
            echo "‚ö†Ô∏è No report file found, scan may have failed."
          fi